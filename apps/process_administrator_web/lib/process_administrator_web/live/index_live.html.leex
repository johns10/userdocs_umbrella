<main role="main" class="container">
  <%= if @auth_state == :logged_in do %>
    <%= LiveHelpers.live_version_picker(@socket, [
      id: "version-selector",
      current_user: @current_user,
      current_team: @current_team,
      current_team_id: @current_team_id,
      current_project: @current_project,
      current_project_id: @current_project_id,
      current_version: @current_version,
      current_version_id: @current_version_id,
      live_action: :show,
      data: %{
        projects: @projects,
        teams: @teams,
        versions: @versions,
      }])
    %>
    <%= LiveHelpers.live_modal_menus(@socket, [
      id: "modal-menus",
      action: @modal_action])
    %>
    <%= if @current_version do %>
      <%= for process <- @current_processes do %>
        <%= live_component(@socket, ProcessAdministratorWeb.GroupComponent, [
            id: ID.group("process", process.id),
            parent: @current_version,
            object: process,
            object_type: UserDocs.Automation.Process,
            object_form: ProcessLive.FormComponent,
            runner:
              live_component(@socket, ProcessLive.Runner, [
                id: "process-" <> Integer.to_string(process.id) <> "-runner",
                process: preload_process(process, assigns)
              ]),
            child_type: UserDocs.Automation.Step,
            new_form_component: StepLive.FormComponent,
            new_form_object: %Step{},
            data: %{
              steps: @steps, # Only needed because I have recent navigated page on :new step forms
              pages: @pages, # Only needed because I have recent navigated page on :new step forms
              processes: @processes, # Only needed because I have recent navigated page on :new step forms
              step_types: @step_types,
              annotation_types: @annotation_types,
            },
            # TODO: Add last_page_navigated to logic here.
            select_lists: %{
              step_types_select: UserDocs.Helpers.select_list(@step_types, :name, false),
              elements_select: UserDocs.Helpers.select_list(@elements, :name, false),
              annotations: UserDocs.Helpers.select_list(@annotations, :name, false),
              versions: UserDocs.Helpers.select_list(@versions, :name, false),
              strategies: UserDocs.Helpers.select_list(@strategies, :name, true),
              annotation_types: UserDocs.Helpers.select_list(@annotation_types, :name, true),
              content: UserDocs.Helpers.select_list(@content, :name, true),
              processes_select: UserDocs.Helpers.select_list(
                Enum.filter(@processes || [], fn(p) -> p.version_id == Map.get(@current_version, :id, nil) end), :name, false),
              pages_select: UserDocs.Helpers.select_list(
                Enum.filter(@pages || [], fn(p) -> p.version_id == Map.get(@current_version, :id, nil) end), :name, false),
          }])
        do %>
          <%= for step <- process.steps do %>
            <%= live_component(@socket, ProcessAdministratorWeb.CollapsableFormComponent,
              [
                id: ID.form(step, :edit, Step),
                title: step.name,
                runner:
                  live_component(@socket, StepLive.Runner, [
                    id: "step-" <> Integer.to_string(step.id) <> "-runner",
                    step: step,
                    step_type_name: step.step_type.name])])
            do %>

              <%= live_component(@socket, StepLive.FormComponent, [
                  action: :edit,
                  step: step,
                  id: ID.form(step, :edit, Step),
                  parent: process,
                  parent_id: Map.get(process, :id, nil),
                  type: Step,
                  data: %{
                    annotation_types: @annotation_types,
                    content_versions: @content_versions,
                    annotations: @annotations,
                    strategies: @strategies,
                    step_types: @step_types,
                    processes: @processes,
                    elements: @elements,
                    projects: @projects,
                    content: @content,
                    pages: @pages,
                  },
                  select_lists: %{
                    teams: UserDocs.Helpers.select_list(@teams, :name, false),
                    strategies: UserDocs.Helpers.select_list(@strategies, :name, true),
                    language_codes: UserDocs.Helpers.select_list(@language_codes, :code, false),
                    step_types_select: UserDocs.Helpers.select_list(@step_types, :name, false),
                    annotations:
                      UserDocs.Helpers.select_list(
                        Enum.filter(@annotations, fn(a) -> a.page_id == step.page_id end),
                        :name, true),
                    elements_select:
                      UserDocs.Helpers.select_list(
                        Enum.filter(@elements, fn(e) -> e.page_id == step.page_id end),
                        :name, true) ,
                    content: UserDocs.Helpers.select_list(@content, :name, true),
                    content_versions: UserDocs.Helpers.select_list(@content_versions, :name, false),
                    versions: UserDocs.Helpers.select_list(@versions, :name, false),
                    processes_select: UserDocs.Helpers.select_list(
                      Enum.filter(@processes, fn(p) -> p.version_id == @current_version.id end), :name, false),
                    pages_select: UserDocs.Helpers.select_list(
                      Enum.filter(@pages, fn(p) -> p.version_id == @current_version.id end), :name, true),
                    annotation_types: UserDocs.Helpers.select_list(@annotation_types, :name, true),
                  }])
              %>

            <% end %>
          <% end %>
        <%= end %>
      <%= end %>
      <%= live_component(@socket, UserDocsWeb.ScreenShotHandler, [ id: "screenshot-handler-component" ]) %>
      <%= live_component(@socket, UserDocsWeb.SelectorHandler, [ id: "selector-handler" ]) %>
      <div id="selector-tester" phx-hook="testSelector"></div>
      <!--<nav class="navbar is-fixed-bottom" role="navigation" aria-label="main navigation">

        <div class="navbar-brand">
          <div class="navbar-item">
            <div class="field is-grouped">
              <%= f = form_for :current_strategy, "#", phx_change: "update_current_strategy"%>
                <div class="control">
                  <div class="select">
                    <%= select f, :strategy_id,
                      UserDocs.Helpers.select_list(@strategies, :name, false),
                      value: Enum.filter(@strategies, fn(s) -> s.id == @current_version.strategy_id end) |> Enum.at(0) |> Map.get(:id),
                      id: "current-strategy",
                      phx_hook: "configure"
                    %>
                  </div>
                </div>
              </form>
              <%= f = form_for :selected, "#" %>
                <div>
                  <div class="select">
                    <%= select f, :strategy_transfer_field,
                      UserDocs.Helpers.select_list(@strategies, :name, false),
                      value: @transferred_strategy.id,
                      id: "strategy-transfer-field",
                      disabled: true
                    %>
                  </div>
                </div>
              </form>
              <p class="control">
                <input
                  class="input"
                  type="text"
                  placeholder="Selector"
                  id="selector-transfer-field"
                  value="<%= @transferred_selector %>"
                >
              </p>
            </div>
          </div>
        </div>
      </nav>-->
    <% end %>
  <% else %>
    <%= form_for @changeset, "http://app.davenport.rocks:4001/session", [as: :user], fn f -> %>
      <%= if @changeset.action do %>
        <div class="alert alert-danger">
          <p>Oops, something went wrong! Please check the errors below.</p>
        </div>
      <% end %>

      <%= label f, Pow.Ecto.Schema.user_id_field(@changeset) %>
      <%= text_input f, Pow.Ecto.Schema.user_id_field(@changeset) %>
      <%= error_tag f, Pow.Ecto.Schema.user_id_field(@changeset) %>

      <%= label f, :password %>
      <%= password_input f, :password %>
      <%= error_tag f, :password %>

      <div>
        <%= submit "Sign in" %>
      </div>
    <% end %>
  <% end %>
</main>
